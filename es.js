let e=0;var t={num:function(){return e++}};class n extends Promise{constructor(e,t){super(e),this.value=t}toString(){return this.value.toString()}then(e,t){return new n((()=>{super.then(e,t)}),this.value?.then?.()||this.value)}catch(e){return new n((()=>{super.catch(e)}),this.value?.catch?.()||this.value)}finally(e){return new n((()=>{super.finally(e)}),this.value?.finally?.()||this.value)}}var r={ValuePromise:n};const{num:o}=t,{ValuePromise:l}=r,s=e=>`[[[[${e}}}}}`,u=e=>"";const a=e=>`<template rid="${e}"></template>`;function c(e,t){const n=[],r=[];let u={toString(){return this.value}};function a(e,t){if(!(e instanceof Function))return"";const l=o(),a=(t||e.holder||s)(l),c=e(l,a,u);return c instanceof Promise?n.push(c):c instanceof Function&&r.push(c),a}return new l(((o,l)=>{i(e,t,a,l).then((e=>{u.value=e,Promise.all(n).then((e=>{o&&o(u.value);for(let t of r)t(e)}))}),(e=>{console.log(e.toString()),l&&l(e)}))}),u)}c.fetch={value:e=>Promise.resolve(e),fetch:(e,t,n,r,o)=>{let l=c.fetch[e+"s"];return l||(l={},c.fetch[e+"s"]=l),l.hasOwnProperty(t)?Promise.resolve(l[t]):fetch(t,n).then((t=>t[e]()),r).then((e=>(o&&(e=o(e)),l[t]=e,e.url=t,e)),r)},text:(e,t,n)=>c.fetch.fetch("text",e,t,n),temp:(e,t,n,r)=>c.fetch.fetch("text",e,t,n,r||(e.endsWith(".js")?c.jsTemplate:c.template)),json:(e,t,n)=>c.fetch.fetch("json",e,t,n)},c.args="ctx, raw, hook, $",c.template=e=>c.jsTemplate("("+c.args+") => `"+e+"`"),c.jsTemplate=e=>new Function("return "+e+";")(),c.functions={};const i=function(e,t,n,r){let o,l;return o="string"==typeof e?c.fetch.temp(e):e instanceof Promise?e:Promise.resolve(e),l="string"==typeof t?c.json(t):t instanceof Promise?t:Promise.resolve(t||{}),Promise.all([o,l]).then((e=>{let t=e[0],r=e[1];return t(h(r),r,n,c.functions)}),r)};function h(e){return e.__proxy__?e:new Proxy(e,f)}const f={get(e,t){if("__proxy__"===t)return!0;let n=e[t];return null==n?"":"object"==typeof n?h(n):"string"==typeof n?n.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"):n}};var p={render:c,include:function(e,t,n){const r=(n,r,o)=>c(e,t).then((e=>{o.value=result.value.value.replace(r,e)}));return r.holder=u,r},lazy:function(e,t,n){let{holder:r,error:o}=n||{},l=(n,r,o)=>()=>{c(e,t).then((e=>{const t=document.querySelector(`[rid="${n}"]`);t&&(t.insertAdjacentHTML("afterend",e),t.parentNode.removeChild(t))}))};return l.holder=e=>(r||a)(e),l},blank:()=>"",loop:(e,t,n)=>e.map(t).join(n||"")};export default p;
